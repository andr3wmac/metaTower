import os, sys, types, threading, inspect

package_list = []
events = None

class EventManager:
	class EventItem:
		def __init__(self, event, function):
			self.event = event
			self.function = function

	def __init__(self):
		self.events = []
	
	def register(self, event, function):
		newEvent = self.EventItem(event, function)
		self.events.append(newEvent)
		
	def trigger(self, event, session = None, args = {}):
		for e in self.events:
			if e.event == event: 
				arg_count = len(inspect.getargspec(e.function).args)
				if ( arg_count == 0 ) : return e.function()
				if ( arg_count == 1 ) : return e.function(session)
				if ( arg_count == 2 ) and ( len(args) > 0 ) : return e.function(session, args)
		return None

def get(package_name):
	modulePath = "packages." + package_name
	try:
		aMod = sys.modules[modulePath]
		if not isinstance(aMod, types.ModuleType):
			raise KeyError
	except KeyError:
		aMod = __import__(modulePath, globals(), locals(), [''])
	return aMod

def reloadPackage(package_name = ""):
	for mod in package_list:
		if ( package_name != "" ):
			if ( ("packages." + package_name) == mod.__name__ ): reload(mod)
		else:
			reload(mod)

def start():
	global package_list, events
	if ( len(package_list) > 0 ): return

	events = EventManager()

	curdir = os.getcwd() + "/packages/"
	files = os.listdir(curdir)
	if len(files) > 0:
		for f in files:
			if (os.path.isdir(curdir + f)):
				package_files = os.listdir(curdir + f)
				package_real = False
				if len(package_files) > 0:
					for af in package_files:
						if af == "__init__.py": package_real = True 
				if package_real:
					package = get(f)
					package_list.append(package)
	
	print "Packages: "
	for package in package_list:
		print " - " + package.name
		if ( hasattr(package, "onLoad") ): package.onLoad()
		
def stop():
	print "Please wait while all packages are stopped."
	for package in package_list:
		if ( hasattr(package, "onUnload") ): package.onUnload()
		
def pageLoaded(session):
	global events
	return events.trigger("page.load", session)

def onLogin(session):
	global events
	events.trigger("session.onLogin", session)
